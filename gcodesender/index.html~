<html>
	<head>
		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
		<style>
			#log{
				height:50vh;
				overflow: auto;
				padding:10px;
			}
			#control-panel{
				height:50vh;
			}
			#gcode-sender{
				padding:10px;
				padding-bottom:5px;
			}
			#controls{
				padding:10px;
			}
			#msg{
				margin:bottom:5px;
				height:75%;
				width:90%;
			}
			button{
				padding-left:10px;
				padding-right:10px;
			}
		</style>
	</head>
	<body>
		<div id="log">
			G Code Sender v2.0<br>
			By Amey Kamat and Tanay Gahlot</br> 
		</div>
		<div id="control-panel" style="margin:0px; background-color:lightgray">
				<div id="gcode-sender" class="col-md-6">
					<form id="form">
						<textarea id="msg"></textarea><br><br>
						<input type="submit" value="Carve!" id="carve" disabled/>
						<button type="button" value="stop" id="stop" onclick="sendCommand(this)" disabled>Stop (Not Tested)</button>
					</form>
				</div>
				<div class="col-md-6">
					<div class="row" style="text-align:center; padding-top:10px;">
						<button type="button" value="open" id="open" onclick="sendCommand(this)">Open Port</button>
						<button type="button" value="zero" id="zero" onclick="sendCommand(this)">Zero Position</button>
						<button type="button" value="close" id="close" onclick="sendCommand(this)" disabled>Close Port</button>
					</div>
					<div class="row" style="text-align:center;padding-top:20px;">
						Offset: <input type="text" id="offset" value="1" style="width:50px"/>
					</div>
					<div class="row">
						<div class="col-md-6" style="padding-top:50px; padding-bottom:50px;">
							<div class="row" style="text-align:center">
								<button type="button" value="forward" id="zero" onclick="sendCommand(this)">&uarr;</button>
							</div>
							<div class="row">
								<div id="controls" class="col-md-6" style="text-align:right">
									<button type="button" value="left" id="zero" onclick="sendCommand(this)">&larr;</button>
								</div>
								<div id="controls" class="col-md-6" style="text-align:left">
									<button type="button" value="right" id="zero" onclick="sendCommand(this)">&rarr;</button>
								</div>
							</div>
							<div class="row" style="text-align:center">
								<button type="button" value="backword" id="zero" onclick="sendCommand(this)">&darr;</button>
							</div>
						</div>
						<div class="col-md-6" style="padding-top:50px; padding-bottom:50px;">
							<div class="row" style="text-align:center">
								<button type="button" value="up" id="zero" onclick="sendCommand(this)">&uarr;</button>
							</div>
							<div class="row" style="text-align:center; padding:10px">
								Z-Axis
							</div>
							<div class="row" style="text-align:center">
								<button type="button" value="down" id="zero" onclick="sendCommand(this)">&darr;</button>
							</div>
						</div>
					</div>
					<div id="progress" class="row" style="text-align:center;padding-top:20px;"></div>
				</div>
		</div>
		
	

		<script>
			/* Setting all global HTML elements */
			var msg = $("#msg");
			var log = $("#log");
			var progress = $("#progress");
			var totInstr;
			var complInstr;

			/* Setting all attributes governing the gcode sender */
			var conn;
			var messageBuffer = "";
			var portName = "";
			var baudRate = "9600";
			var gcode = [];
			var currentLine = 0;
			var isStop = false; 
			var isReset = true;

			/* Utility function to display current output to log */
			function display(msg) {
				var d = log[0];
				var doScroll = d.scrollTop == d.scrollHeight - d.clientHeight;
				$("<div>"+ msg +"</div>").appendTo(log);
				if (doScroll) {
					d.scrollTop = d.scrollHeight - d.clientHeight;
				}
			}

			/* Sending message to CNC */
			function sendMessage(msg){
				
				print("Sending Messge : " + msg);
				display("Sending Messge : " + msg);
				conn.send(msg + "\n")
			}

			/* Function to handle test commands from UI */
			function sendCommand(btn){
				var dir = btn.value;
				var offset = $("#offset").val();
				totInstr = 0;
				print(offset);
				if((isNaN(offset) || offset=="") && (dir != "zero" || dir != "close")){
					print("Enter valid offset");
					print(offset);
					display("Enter valid offset");
					return;
				}
				var msg;
				if(dir == "zero")													//Zero Position
					msg = "send " + portName + " G92 X0 Y0 Z0";
				if(dir == "up")														//Move Left
					msg = "send " + portName + " G0 X0 Y0 Z" + offset;
				if(dir == "down")													//Move Down
					msg = "send " + portName + " G0 X0 Y0 Z-" + offset;
				if(dir == "left")													//Move Left
					msg = "send " + portName + " G0 X-" + offset + " Y0 Z0";
				if(dir == "right")													//Move Right
					msg = "send " + portName + " G0 X" + offset + " Y0 Z0";
				if(dir == "forward")												//Move Forward
					msg = "send " + portName + " G0 X0 Y" + offset + " Z0";
				if(dir == "backword")												//Move Backward
					msg = "send " + portName + " G0 X0 Y-" + offset + " Z0";
				if(dir == "close"){
					gcode = [];
					msg = "close " + portName;
				}
				if(dir == "open"){
					isReset = true;
					msg = "list";
				}
				if(dir == "stop"){
					isStop = true;
					msg = "close " + portName;
				}
				sendMessage(msg);
			}

			/* Event Handler to handle the submitted gcode */
			$("#form").submit(function(e) {
				e.preventDefault();
				if (!conn) {
					return false;
				}
				if (!msg.val()) {
					return false;
				}
				
				gcode = msg.val();
				
				/* Break down gcode and send first message to CNC */
				splitGcode();
				totInstr = gcode.length;
				complInstr = 0;
				print(gcode)
				sendMessage("send " + portName + " " + gcode.shift());
				return false
			});

			/* Getter for the buffer for response */
			function getMessageBuffer(){
				var value = messageBuffer;
				messageBuffer = "";
				return value;
			}

			/* Setter for the buffer for response */
			function setMessageBuffer(value){
				messageBuffer = value;
			}

			/* Poll all the ports returned by list command */
			function portSelector(data){
				var listOfPorts = data["SerialPorts"];
				for(var i=0; i<listOfPorts.length; i++){
					sendMessage("open " + listOfPorts[i].Name + " " + baudRate);
				}
			}

			/* Show Error */
			function showError(data){
				print(data.Error);
				display(data.Error);
			}

			/* Split gcode string into array of gcodes */
			function splitGcode(){
				gcode = gcode.split("\n");
			}

			/* Handle Cmd response */
			function showCmd(response){
				if(response.Cmd == "OpenFail"){
					/* Opening operation failed for a port */
					print(response.Desc + " for port " + response.Port);
					display(response.Desc + " for port " + response.Port);
					sendMessage("close " + response.Port);
				}
				else if(response.Cmd == "Open"){
					/* Port has been opened */
					print(response.Desc);
					display(response.Desc);
				}
				else if(response.Cmd == "Close"){
					/* Port has been opened */
					print(response.Desc);
					display(response.Desc);
					$("#close").attr('disabled',true);
					$("#carve").attr('disabled',true);
					$("#stop").attr('disabled',true);
					$("#open").attr('disabled',false);
					if(isStop){
						sendMessage("list");
						isStop = false;
					}
					totInstr = 0;
					
				}
				else{
					print(response);
				}
			}

			function print(value){
				console.log(value)
			}

			if(window["WebSocket"]){

				/* Connect to standard web socket */
				conn = new WebSocket("ws://localhost:8989/ws");
				conn.onopen = function (event) {
					print(event);
					display("Connection with serial JSON server established successfully.");					
				};
				conn.onerror=function(event){
					print(event);
					display("Connection was refused. Ensure that serial JSON server is running.");					
				};
				conn.onclose=function(event){
					print(event);
					display("Connection to server disconnected.");	
					$("#close").attr('disabled',true);
					$("#carve").attr('disabled',true);
					$("#stop").attr('disabled',true);
					$("#open").attr('disabled',false);
				};
				
				print(conn);
				
				/* Event Listener for custom event get to for message out of chunks */
				conn.addEventListener("get", function(e){
					var message = messageBuffer;
					print(message);
					currentLine++;
					/* If Gcode array is not null */
					if(gcode[0]){
					
						/* Send next gcode */
						sendMessage("send " + portName + " " + gcode.shift());
					}
				});
				
				/* Do this on response */
				conn.onmessage = function(e){
					var message = getMessageBuffer();
					var response = JSON.parse(e.data);
					var key = Object.keys(response)[0];
					
					/* All possible responses frm CNC listed down */ 
					if(key == "Version"){
						print("Version: " + response.Version);
						display("Version: " + response.Version);
					}
					else if(key == "Commands"){}
					else if(key == "Hostname"){
						print("HostName: " + response.Hostname);
						display("HostName: " + response.Hostname);
						sendMessage("list");
					}
					else if(key == "Error"){
						showError(response);
					}
					else if(key == "SerialPorts"){
						portSelector(response);
					}
					else if(key == "Cmd"){
						showCmd(response);
					}
					else if(key == "P"){
					
						/* Message received in chunks. Proceed to message buffer */
						message = message + response.D;
						setMessageBuffer(message);
						
						/* If the server is initialised */
						if(message == "\r\nGrbl 0.8c ['$' for help]\r\n"){
							portName = response.P;
							display(message);
							print("Setting Active Port: " + portName);
							display("Setting Active Port: " + portName);
							currentLine++;
							$("#carve").attr('disabled', false);
							$("#stop").attr('disabled', false);
					 		$("#close").attr('disabled', false);
							$("#open").attr('disabled',true);
							isPortOpen = true;
							/* Set relative coordinates in case server is reinitialised */
							sendMessage("send " + portName + " " + "G91");
							
						}
						else if(message == "ok\r\n"){	/* End of response detected */
							/* Fire custom get event */
							if(totInstr > 0){
								progress.text(Math.round(complInstr*100/totInstr) + "% Completed")
								complInstr++;
							}
							var event = new CustomEvent('get');
							e.currentTarget.dispatchEvent(event);
						}
					}
					else{
						print(e.data);
						display(e.data);
					}
				};
			}
		</script>

	</body>
</html>

